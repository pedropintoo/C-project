module(stat) ::= <<
from tkinter import *
import time, os, sys

## Auxiliar vars
last_refresh = time.time()
##

root = Tk()
root.withdraw()
root.title("C-Project Compiler")  

<stats(stat)>
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

canvas(stat, var, view_title, view_properties) ::= <<
<stats(stat)>

<view_title>
top = Toplevel(root)
<var> = Canvas(top, <view_properties>)
<var>.pack()

# binding onClick and getMouse
mouseX = None
mouseY = None
def onClick(event):
    global mouseX, mouseY
    mouseX, mouseY = event.x, event.y

def getMouse():
    global mouseX, mouseY
    <var>.update()
    mouseX = None; mouseY = None
    while mouseX == None:
        time.sleep(.1)
        <var>.update() 

top.bind("\<Button-1\>", onClick)

>>

view_title(title) ::= <<
root.title(<title>)
>>

view_properties(field) ::= <<
<properties(field)>
>>

properties(field) ::= <<<if(field)><field; separator=","><endif>
>>

waitMouseClick(var) ::= <<

getMouse()
<var> = (mouseX, mouseY)
>>

refresh(stat, view, delay) ::= <<

<if(delay)> 
<stats(stat)>
while (time.time() - last_refresh \<= <delay>):
    pass   

<endif>
last_refresh = time.time()
<view>.update()
>>

print(stat, output) ::= <<

<stats(stat)>
print(<output>)
>>

for(value, sequence, stat) ::= <<
for <value> in <sequence>:
    <stats(stat)>
>>

range(start, end, step) ::= "range(<start>, <end>, <step>)"


assign(stat,var,value) ::= <<
<stats(stat)>
<if(value)><var> = <value><endif>
>>

init(value) ::= "<if(value)> = <value><endif>"
decl(var, value) ::= "<var><init(value)>"

binaryExpression(stat,var,e1,op,e2) ::= <<
<stats(stat)>
<decl(var,[e1," ",op," ",e2])>
>>

unaryExpression(stat,var,op,e1) ::= <<
<stats(stat)>
<decl(var,[op," ",e1])>
>>