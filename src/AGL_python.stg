module(stat) ::= <<
from tkinter import *
from AGLClasses import *
import math
import time, os, sys
import copy
from enum import Enum, auto

#################################################################
## Auxiliar
#################################################################
REFRESH_RATE = 0.1
last_refresh = time.time()
last_view = None
mouseX = None
mouseY = None
model = None
#################################################################

if __name__ == "__main__":
    root = Root()

    <stats(stat)>
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

waitMouseClick(var) ::= <<
if model is not None:
    model.<var> = model.view.waitClick()
else:
    <var> = last_view.waitClick()
>>

refresh(stat, view, delay) ::= <<
<if(delay)> 
<stats(stat)>
while (time.time() - last_refresh \<= <delay>):
    time.sleep(REFRESH_RATE)   

<endif>
last_refresh = time.time()
<view>.update()
>>

print(stat, output) ::= <<
<stats(stat)>
print(<output>)
>>

if_else(stat, condition, if_instructions, else_instructions) ::= <<
<stats(stat)>
if <condition>:
    <if_instructions>
else:
    <else_instructions>
>>

for(stat, var, range, instructions) ::= <<
<stats(stat)>
if model is not None:
    for model.<var> in <range>:
        <instructions>
else:
    for <var> in <range>:
        <instructions>
>>

range(start, end, step) ::= "range(<start>, <end>, <step>)"

while(stat, var, condition, instructions) ::= <<
<stats(stat)>

while <condition>:
    <instructions>
    # refresh the condition
    <stats(stat)>
    ##
>>

repeat(stat, var, condition, instructions) ::= <<
<stats(stat)>
while True:
    <instructions>
    # refresh the condition
    <stats(stat)>
    ##
    if not <condition>:
        break   # Repeat until condition is false
>>

move(stat, var, destination, relative) ::= <<
<stats(stat)>
if model is not None:
     <if(relative)>model.<var>.move_relative(<destination>)<else>model.<var>.move_absolute(<destination>)<endif>
else:
    <if(relative)><var>.move_relative(<destination>)<else><var>.move_absolute(<destination>)<endif>
>>

close(view) ::= <<
<view>.close()
>>

assign(stat,var,value, varIfModel) ::= <<
<stats(stat)>
<if(value)><var> = <value><endif><if(varIfModel)>
if model is not None: 
    model.<varIfModel> = <var>
    model.last_<varIfModel> = <var>
<endif>
>>

init(value) ::= "<if(value)> = <value><endif>"
decl(var, value) ::= "<var><init(value)>"

binaryExpression(stat,var,e1,op,e2) ::= <<
<stats(stat)>
<decl(var,[e1," ",op," ",e2])>
>>

unaryExpression(stat,var,op,e1) ::= <<
<stats(stat)>
<decl(var,[op," ",e1])>
>>

object(stat, var, type, origin, properties, update_lastView) ::= <<
<stats(stat)>

if model is not None:
    <var> = <type>()
    model.add_object(<var>) # add object to model
else:
    <var> = <type>(root = root)
<if(origin)><var>.origin = <origin><endif>
<if(update_lastView)>last_view = <var>
<endif>
<properties>
>>

action(stat, var, actionStat) ::= <<
<stats(stat)>

if self.<var> != self.last_<var>:
    <stats(actionStat)>
    self.last_<var> = self.<var>

>>

model_creation(modelName, modelStat, action) ::= <<
#################################################################
## Model
#################################################################
class <modelName>(Model):
    def __init__(self, root: Root = None, view: View = None, origin=(0,0)):
        super().__init__(root=root, view=view, origin=origin)
        model = self
        <stats(modelStat)>
        model = None
        self.fixCoords()

    def create_object(self, view):
        <actions(action)>    

        super().create_object(view)
#################################################################
>>

model(var, modelName, origin) ::= <<

<var> = <modelName>(root = root, view = last_view, origin = <origin>)

>>

block_properties(stat, field) ::= <<
<stats(stat)>

<properties(field)>
>>

array(stat, var, field) ::= <<
<stats(stat)>
<var> = [<elements(field)>]
>>

enum(var, id, value) ::= <<
class <var>(Enum):
    <enum_auto(id)>
<enum_assign(id)>
<value> = <var>(1)  
>>

enum_auto(id) ::= <<
<if(id)><id; separator=" = auto()\n"><endif>
>>

enum_assign(var, id) ::= <<
<if(id)>global <id; separator="\n<id> = <var>.<id>\n"><endif>
>>

properties(field) ::= <<
if model is not None:
    <if(field)>model.<field; separator="\n"><endif>
else:
    <if(field)><field; separator="\n"><endif>
>>

elements(field) ::= <<
<if(field)><field; separator=","><endif>
>>