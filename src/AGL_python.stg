module(stat) ::= <<
from tkinter import *
from AGLClasses import *
import time, os, sys

#################################################################
## Auxiliar
#################################################################
REFRESH_RATE = 0.1
last_refresh = time.time()
last_view = None
mouseX = None
mouseY = None
#################################################################

if __name__ == "__main__":
    root = Tk()
    root.withdraw()

    top = Toplevel(root)

    <stats(stat)>
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

properties(field) ::= <<
<if(field)><field; separator=","><endif>
>>

waitMouseClick(var) ::= <<
<var> = last_view.waitClick()
>>

refresh(stat, view, delay) ::= <<
<if(delay)> 
<stats(stat)>
while (time.time() - last_refresh \<= <delay>):
    time.sleep(REFRESH_RATE)   

<endif>
last_refresh = time.time()
<view>.update()
>>

print(stat, output) ::= <<
<stats(stat)>
print(<output>)
>>

for(var, range, stat, instruction) ::= <<
<stats(stat)>
for <var> in <range>:
    <stats(instruction)>
>>

range(start, end, step) ::= "range(<start>, <end>, <step>)"

close(view) ::= <<
<view>.close()
>>

assign(stat,var,value,attribute) ::= <<
<stats(stat)>
<if(value)><var><if(attribute)>.<attribute><endif> = <value><endif>
>>

init(value) ::= "<if(value)> = <value><endif>"
decl(var, value) ::= "<var><init(value)>"

binaryExpression(stat,var,e1,op,e2) ::= <<
<stats(stat)>
<decl(var,[e1," ",op," ",e2])>
>>

unaryExpression(stat,var,op,e1) ::= <<
<stats(stat)>
<decl(var,[op," ",e1])>
>>

canvas(stat, var, Ox, Oy, height, width, title, background) ::= <<
<stats(stat)>

<var> = View(
    top=top
    <if(Ox)>,Ox=<Ox><endif>
    <if(Oy)>,Oy=<Oy><endif>
    <if(height)>,height=<height><endif>
    <if(width)>,width=<width><endif>
    <if(title)>,title=<title><endif>
    <if(background)>,background=<background><endif>
    )
last_view = <var>
>>

line(stat, var, origin, length, fill) ::= <<
<stats(stat)>

<var> = Line(
    view=last_view
    <if(origin)>,origin=<origin><endif>
    <if(length)>,length=<length><endif>
    <if(fill)>,fill=<fill><endif>
    )
last_view.add_object(<var>)    
>>

rectangle(stat, var, origin, length, fill) ::= <<
<stats(stat)>

<var> = Rectangle(
    view=last_view
    <if(origin)>,origin=<origin><endif>
    <if(length)>,length=<length><endif>
    <if(fill)>,fill=<fill><endif>
    )
last_view.add_object(<var>)    
>>

ellipse(stat, var, origin, length, fill) ::= <<
<stats(stat)>

<var> = Ellipse(
    view=last_view
    <if(origin)>,origin=<origin><endif>
    <if(length)>,length=<length><endif>
    <if(fill)>,fill=<fill><endif>
    )
last_view.add_object(<var>)    
>>

arc(stat, var, origin, length, start, extent, outline) ::= <<
<stats(stat)>

<var> = Arc(
    view=last_view
    <if(origin)>,origin=<origin><endif>
    <if(length)>,length=<length><endif>
    <if(start)>,start=<start><endif>
    <if(extent)>,extent=<extent><endif>
    <if(outline)>,outline=<outline><endif>
    )
last_view.add_object(<var>) 
>>

arc_chord(stat, var, origin, length, start, extent, fill) ::= <<
<stats(stat)>

<var> = ArcChord(
    view=last_view
    <if(origin)>,origin=<origin><endif>
    <if(length)>,length=<length><endif>
    <if(start)>,start=<start><endif>
    <if(extent)>,extent=<extent><endif>
    <if(fill)>,fill=<fill><endif>
    )
last_view.add_object(<var>) 
>>

pie_slice(stat, var, origin, length, start, extent, fill) ::= <<
<stats(stat)>

<var> = PieSlice(
    view=last_view
    <if(origin)>,origin=<origin><endif>
    <if(length)>,length=<length><endif>
    <if(start)>,start=<start><endif>
    <if(extent)>,extent=<extent><endif>
    <if(fill)>,fill=<fill><endif>
    )
last_view.add_object(<var>) 
>>

text(stat, var, origin, text, fill) ::= <<
<stats(stat)>

<var> = Text(
    view=last_view
    <if(origin)>,origin=<origin><endif>
    <if(text)>,text=<text><endif>
    <if(fill)>,fill=<fill><endif>
    )
last_view.add_object(<var>) 
>>

dot(stat, var, origin, fill) ::= <<
<stats(stat)>

<var> = Dot(
    view=last_view
    <if(origin)>,origin=<origin><endif>
    <if(fill)>,fill=<fill><endif>
    )
last_view.add_object(<var>) 
>>
