module(stat) ::= <<
from tkinter import *
from src.XAGL.AGLClasses import *
import math
import time, os, sys
import copy
from enum import Enum, auto
import numpy as np
from antlr4 import *
from src.XAGL.XAGLLexer import XAGLLexer
from src.XAGL.XAGLParser import XAGLParser
from src.XAGL.Interpreter import Interpreter
from src.XAGL.Semantic import Semantic
from src.XAGL.VarTypes import *

#################################################################
## Auxiliar
#################################################################
REFRESH_RATE = 0.001
last_refresh = time.time()
views = []
last_view = None
mouseX = None
mouseY = None
model = None
action = None
#################################################################
def get_nested_attribute(obj, attr_path, local_dict):
    if obj is None:
        return None
    if attr_path == '':
        return obj    

    # recursive approach
    attr = attr_path.split('.')[0]
    if '[' in attr:
        attr, index = attr.split('[')
        varIndex = index[:-1]
        # consider []...[]
        idx = None
        if varIndex in local_dict:
            idx = local_dict[varIndex]
        else:
            idx = int(varIndex)

        if hasattr(obj, attr):
            obj = getattr(obj, attr)
            obj = obj[idx]
        else:
            return None
    else:
        if hasattr(obj, attr):
            obj = getattr(obj, attr)
        else:
            return None
    
    if '.' in attr_path:
        attr_path = '.'.join(attr_path.split('.')[1:])
        return get_nested_attribute(obj, attr_path, local_dict) 
    else:
        return obj
def transform_dict(original_dict):
    new_dict = {}
    for key, value in original_dict.items():
        if (key != 'root'):
            new_dict[key] = Var(value)
    return new_dict        
#################################################################

if __name__ == "__main__":
    root = Root(views, last_view)

    <stats(stat)>
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

waitMouseClick(var) ::= <<
<var> = root.waitClick()
>>

refresh(stat, view, delay) ::= <<
<stats(stat)>
<if(delay)> 
while (time.time() - last_refresh \<= <delay>):
    time.sleep(REFRESH_RATE)   

<endif>
last_refresh = time.time()
<view>.update()

>>

input(var, message) ::= <<
<var> = input("<message>\n")
>>

print(stat, output) ::= <<
<stats(stat)>
print(<output>)>>

if_else(stat, condition, if_instructions, else_instructions) ::= <<
<stats(stat)>
if <condition>:
    <if_instructions><if(else_instructions)>    
else:
    <else_instructions>
<endif>    
>>

for(stat, var, range, instructions) ::= <<
<stats(stat)>
for <var> in <range>:
    <instructions>
>>

range(start, end, step) ::= "range(<start>, <end>, <step>)"

while(stat, var, condition, instructions) ::= <<
<stats(stat)>

while <condition>:
    <instructions>
    # refresh the condition
    <stats(stat)>
    ##
>>

repeat(stat, var, condition, instructions) ::= <<
<stats(stat)>
while True:
    <instructions>
    # refresh the condition
    <stats(stat)>
    ##
    if <condition>:
        break   # Repeat until condition is false
>>

move(stat, var, destination, relative) ::= <<
<stats(stat)>
if action is not None:
    action.<if(relative)><var>.move_relative(<destination>)<else><var>.move_absolute(<destination>)<endif>
else:
    <if(relative)><var>.move_relative(<destination>)<else><var>.move_absolute(<destination>)<endif>
>>

rotate(stat, var, degree) ::= <<
<stats(stat)>
if action is not None:
    action.<var>.rotate(<degree>)
else:
    <var>.rotate(<degree>)
>>

close(view, stat) ::= <<
<stats(stat)>
<view>.close(); views.remove(<view>) if last_view != <view> else None
last_view = (views.pop(-1) if len(views) > 0 else None) if last_view == <view> else last_view
root.last_view = last_view
root.views = views
>>

assign(stat,var,value, varIfModel) ::= <<
<stats(stat)>

temp = get_nested_attribute(action, '<value>', locals())
if temp is None:
    temp = <value>
if action is not None and hasattr(action, "<var>".split('[')[0].split('.')[0]):
    action.<var> = temp
else:
    <var> = temp 
<if(varIfModel)>
if model is not None: 
    model.<varIfModel> = <var>
    model.last_<varIfModel> = copy.deepcopy(<var>)
    model.addAttributes("<var>".replace("var__agl__", ""), <var>)
    model.addAttributes("last_<varIfModel>".replace("var__agl__", ""), model.last_<varIfModel>)<endif>
>>

init(value) ::= "<if(value)> = <value><endif>"
decl(var, value) ::= "<var><init(value)>"

binaryExpression(stat,var,e1,op,e2) ::= <<
<stats(stat)>
<decl(var,[e1," ",op," ",e2])>; <var> = tuple(<var>) if isinstance(<var>, np.ndarray) else <var>
>>

unaryExpression(stat,var,op,e1) ::= <<
<stats(stat)>
<decl(var,[op," ",e1])>
>>

object(stat, var, type, origin, properties, update_lastView) ::= <<
<stats(stat)>

if model is not None:
    <var> = <type>()
    model.add_object(<var>) # add object to model
else:
    <var> = <type>(root = root)
<if(origin)><var>.origin = <origin><endif>
<if(update_lastView)>if last_view is not None:
    views.append(last_view)  
    # remove duplicates 
    root.views = list(dict.fromkeys(views))
    views = root.views
else: 
    root.views = []
    views = []    
last_view = <var>
root.last_view = last_view
<endif>
<properties>
>>

action(stat, var, actionStat) ::= <<
<stats(stat)>

if self.<var> != self.last_<var>:
    <stats(actionStat)>
    self.last_<var> = copy.deepcopy(self.<var>)

>>

model_creation(modelName, modelStat, action) ::= <<
#################################################################
## Model
#################################################################
class <modelName>(Model):
    def __init__(self, root_local: Root = None, view: View = None, origin=(0,0)):
        super().__init__(root=root_local, view=view, origin=origin)
        model = self
        <stats(modelStat)>
        
        self.fixCoords()

    def create_object(self, view):
        action = self
        <stats(action)>    
        action = None
        super().create_object(view)
        model = None

    def __deepcopy__(self, memo=None):
        """Create a deep copy of the model."""
        if memo is None:
            memo = {} # this is required by the deepcopy protocol
        new_model = <modelName>()

        self.copyAttributesTo(new_model)
        new_model.view = self.view
        new_model.root = self.root
        return new_model       

#################################################################
>>
model(var, modelName, origin) ::= <<

if model is not None:
    model_backup = model
    <var> = <modelName>() # this makes model = None in the end!
    model = model_backup
    model.add_object(<var>) # add object to model
else:
    <var> = <modelName>(root_local = root, view = last_view)
<if(origin)><var>.move_absolute(<origin>)<endif>  
>>

block_properties(stat, field) ::= <<
<stats(stat)>

if action is not None:
    <properties2(field)>
else:
    <properties(field)>
>>

array(stat, var, field) ::= <<
<stats(stat)>
<var> = [<elements(field)>]
>>

enum(var, id, value) ::= <<
class <var>(Enum):
    <id: {id | <id> = auto()}; separator="\n"> 
<id: {id | global <id>; <id> = <var>.<id>}; separator="\n">   
<value> = <var>(1) # first is default
>>

properties(field) ::= <<
<if(field)><field; separator="\n"><endif>
>>

properties2(field) ::= <<
<if(field)><field: {field | action.<field>}; separator="\n"><endif>
>>



deepcopy(stat, var, object, origin) ::= <<
<stats(stat)>

<var> = copy.deepcopy(<object>)
<var>.move_absolute(<origin>)  

if model is not None: 
    model.<var> = <var>
    model.last_<var> = copy.deepcopy(<var>)
    model.add_object(<var>) # add object to model
    model.addAttributes("<var>".replace("var__agl__", ""), <var>)
    model.addAttributes("last_<var>".replace("var__agl__", ""), model.last_<var>)
else:
    root.add_object(<var>)
>>

play(stat, file, field) ::= <<
<stats(stat)>

# Play with XAGL file or input stream
file = <file>
vars1 = {"root":root, <elements(field)>}
vars0 = transform_dict(vars1)

visitor0 = Semantic(vars0)
visitor1 = Interpreter(vars1)
input_stream = FileStream(file) if file.endswith('.xagl') else InputStream(file)
lexer = XAGLLexer(input_stream)
stream = CommonTokenStream(lexer)
parser = XAGLParser(stream)

tree = parser.program()
if parser.getNumberOfSyntaxErrors() == 0:
    visitor0.visit(tree)
    if not visitor0.error:
        visitor1.visit(tree)

>>

elements(field) ::= <<
<if(field)><field; separator=","><endif>
>>
