#(
    A 'Model' defines the appearance and properties of a graphical item.
    It has an intrinsic reference frame, relative to which all of its graphical 
    children are positioned.
    When instantiated, a pose (position) is required, 
    which represents where it is in its container.

    There is a set of basic models: Dot, Rectangle, Line, ...

    Every model holds a set of attributes (aka properties).
    The set of properties may change from model to model.
    Every property has an intrinsic type and a default value.

    The set of properties of basic models is defined by default.
    The set of properties of used-defined models is stablished when the model is defined.
#)

#
# This example defines a pacman with eye.
# 

#
# The doble-colon operator (::) is used to defined a new model
#
Pacman :: Model {
    # A Pacman is composed of a pie slice plus an ellipse representing an eye.
    # Its reference frame is at the center of the circle circumscribing the pie slice.
    #
    # Models can have their own properties, in which case a way to represent how they
    # reshape the graphical object is mandatory

    # The main pacman shape, with a reference for future use
    face : PieSlice at (0,0) with {
        length = (50,50);
        fill = "pink";
        start = 30;
        extent = 300;
    }

    # the eye, without a reference
    eye : Ellipse at (20,35) with {
        fill = "black";
        length = (5,5);
    }
    
    fire : Rectangle at (55, 0) with {
        length = (15, 2);
        fill = "red";
        state = "hidden";
    }

    action on eye.fill {
        if eye.fill == "red" do {
            print "The eye is red";
            fire.state = "normal";
            print fire;
        }
        else do {
            print "The eye is black";
            fire.state = "hidden";
            print fire.state;
        }
    }

    len_pac : Vector = (50,50); 
    action on len_pac { 
        with face do {
            length = len_pac;
        }
    }

    # properties and how they reshape children's properties
    mouth : Enum in { Open, Close } # the first value is the default
    action on mouth {
        if mouth == Open do {
            with face do {
                start = 30;
                extent = 300;
            }
            len_pac = (50,50);
            with eye do {
                fill = face.fill;
                length = (5,5)
            }
            
            move eye by (-5,-10);
        }
        else do {# has to be Close, since there are only two possible values
            with face do {
                start = 1;
                extent = 359;
            }
            len_pac = (60,60);
            with eye do {
                fill = "red";
                length = (10,10)
            }
            move eye by (5,10);
        }
    }
}

#
# A strip where the pacman is moving
# 
Rectangle at (0,0) with {
    length = (1000,70);
    fill = "blue";
}

#
# create an instance of a View, at the beginning of the strip
#
view : View with {
    Ox = -450;
    Oy = 0;
    width = 401;
    height = 401;
    title = "Illustrating a moving pacman";
    background = "alice blue";
}

#
# Instantiate a Pacman, with the default property values
#
pacman : Pacman at (-450, 0);

#
# The refresh view command makes the graphics appear
#
refresh view;

#
# iteration to make the pacman open and close its mouth and to move 
# both the pacman and the view to the right, such that pacman keeps
# in the center of the view
#
for i in 1 .. 10 do {
    pacman.mouth = Close;
    refresh view after 175 ms;
    pacman.mouth = Open;
    refresh view after 175 ms;
    move pacman by (10,0);    # the 'by' makes the movement relative; the argument is a vector
    move view by (10,0);    # the 'by' makes the movement relative; the argument is a vector
    refresh view after 175 ms;
}

print "Press any mouse button to quit";
pos : Point = wait mouse click; # instantiate a Point and waits for a mouse click

close view;


